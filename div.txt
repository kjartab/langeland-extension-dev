
DROP Function LS_splittimeline(segment_id INTEGER, linezm GEOMETRY, referenceTime TIMESTAMP with time zone);
DROP TYPE SEGMENTHOLDER;
CREATE TYPE SEGMENTHOLDER AS (id INTEGER, sid INTEGER, segmenttime TIMESTAMP, segment_linezm GEOMETRY);
CREATE OR REPLACE FUNCTION LS_SplitTimeline(segment_id INTEGER, linezm GEOMETRY) RETURNS SETOF SEGMENTHOLDER AS $$

DECLARE 
r SEGMENTHOLDER%ROWTYPE;
n INTEGER;
temp NUMERIC;
updatedportion NUMERIC;
totallength NUMERIC;
counter INTEGER;
nStart INTEGER;
nStop INTEGER;
meantime NUMERIC;
timeSum NUMERIC;
threshold NUMERIC;
tempmeantime TIMESTAMP;
lastTimestamp NUMERIC;
avgTime NUMERIC;
i INTEGER;
referenceTimeValue NUMERIC;
startFrac NUMERIC;
stopFrac NUMERIC;

BEGIN

	SELECT INTO updatedportion LS_UpdatedPortion(linezm, referenceTime);
	SELECT INTO n ST_Npoints(linezm);
	SELECT INTO meantime LS_SegmentMeanTime(linezm);
	
	IF updatedportion >= 0.9 OR updatedportion <=0.01 THEN
		r.sid = segment_id;
		r.segmenttime = to_timestamp(meantime);
		r.segment_linezm = linezm;
		return next r;
		RETURN;
		
	ELSE 
	i := 2;
	counter := 1;
	nStop := 1;
	lastTimestamp := ST_M(ST_PointN(linezm,1));
	nStart := 1;
	timeSum := lastTimestamp;
	threshold := 3600*600;
	
	WHILE i <= n LOOP -- While the linezm has not been read to end - do the following
		
		IF i = n THEN
			
			counter = counter + 1;
			timeSum = timeSum + ST_M(ST_pointN(linezm,i));				
			nStop = i;	
			avgTime = timeSum / counter;	
			r.id = i;
			r.sid = segment_id;
			r.segmenttime = to_timestamp(avgTime);

			startFrac = ST_Line_Locate_Point(linezm,ST_PointN(linezm,nStart));
			stopFrac = ST_Line_Locate_Point(linezm,ST_PointN(linezm,nStop));
			
			r.segment_linezm = ST_LineSubString(linezm, startFrac, stopFrac);
			return next r;
			RETURN;

		ELSE 

			IF abs(lastTimestamp - ST_M(ST_PointN(linezm,i))) < threshold THEN -- If the timedifference is not bigger than threshold
				counter = counter + 1;										-- increase counter; number of points included
				timeSum = timeSum + ST_M(ST_pointN(linezm,i));				-- increase time summation
				nStop = i;													-- set the nEnd to current point
				i = i + 1;			
				
			ELSE 	-- The time difference was too big. Breaking off and returning the segment...
				avgTime = timeSum / counter;
				nStop = i;
					
				r.id = i;
				r.sid = segment_id;
				r.segmenttime = to_timestamp(avgTime);

				startFrac = ST_Line_Locate_Point(linezm,ST_PointN(linezm,nStart));
				stopFrac = ST_Line_Locate_Point(linezm,ST_PointN(linezm,nStop));
				
				r.segment_linezm = ST_LineSubString(linezm, startFrac, stopFrac);
			
				return next r;
				
				-- Initializing next round
				nStart = i;
				lastTimestamp = ST_M(ST_PointN(linezm,i));
				timeSum = lastTimestamp;
				counter = 1;
			
			END IF;
		
		
		END IF;
			
	END LOOP;
		
		
    END IF;
	
    RETURN;
	
END;

$$ LANGUAGE plpgsql;